Function analyzeOneSensor
Description:  analyze a sensor, if the score is too high the sensor is not trustworthy
Input:        Sensor sensor
Output:       float score
Precondition: sensor exists
Declaration:  float average
              float AQI
              float sum
Begin
    for each date
        average = average AQI of surrounding sensors
        AQI = getAQI(sensor, date)
        sum += abs(average - AQI) / average
    score = sum / numDate
End

Function meanAirQualityArea
Description:  calculate the mean of AQI of a circular area in a given timeframe
Input:        float latitude, longitude, radius
              Sensor[] sensorList
              date timeframe
Output:       float mean
Precondition: valid latitude and longitude in degrees, reasonable radius in meter 
Declaration:  float sum = 0
              int num = 0
Begin
    for each date in timeframe
        for each sensor in sensorList
            if sensor is in the circle
                num++
                sum += getAQI(sensor, date)
    mean = sum / num
End

Function compareOneSensor
Description:  find areas with similar air quality of a certain sensor in a given timeframe
Input:        sensor targetSensor
              Sensor[] sensorList
              date timeframe
Output:       Sensor[] sorted
Precondition: valid targetSensor
Declaration:  float difference[] = {0}
              float AQI
              int i
Begin
    sorted = full copy of sensorList
    
    for each date in timeframe
        AQI = getAQI(targetSensor, date)
        for (i = 0; i < sensorList.size; i++)
            difference[i] += abs(getAQI(sensorList[i], date) - AQI)
    sort difference and sorted the same time by ascending difference
End